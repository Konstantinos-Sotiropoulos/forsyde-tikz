\NeedsTeXFormat{LaTeX2e}
\RequirePackage{forsyde-tikz}
\ProvidesPackage{forsyde-pc}
                 [204/12/01 v0.1 Some user-defined macros for ForSyDe process neIIrk constructors]

\newcommand\delay[4][]    {\applicative[#1, ni=1, no=1, nf=1, type=delay]{#2}{#3}{#4}}
\newcommand\delayn[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=delayn]{#2}{#3}{#4}}
\newcommand\map[4][]      {\applicative[#1, ni=1, no=1, nf=1, type=map]{#2}{#3}{#4}}
\newcommand\comb[4][]     {\applicative[#1, ni=1, no=1, nf=1, type=comb]{#2}{#3}{#4}}
\newcommand\combII[4][]   {\applicative[#1, ni=2, no=1, nf=1, type=comb2]{#2}{#3}{#4}}
\newcommand\combIII[4][]  {\applicative[#1, ni=3, no=1, nf=1, type=comb3]{#2}{#3}{#4}}
\newcommand\combIV[4][]   {\applicative[#1, ni=4, no=1, nf=1, type=comb4]{#2}{#3}{#4}}
\newcommand\scanl[4][]    {\applicative[#1, ni=1, no=1, nf=2, type=scanl]{#2}{#3}{#4}}
\newcommand\scanlII[4][]  {\applicative[#1, ni=2, no=1, nf=2, type=scanl2]{#2}{#3}{#4}}
\newcommand\scanlIII[4][] {\applicative[#1, ni=3, no=1, nf=2, type=scanl3]{#2}{#3}{#4}}
\newcommand\scanld[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=scanld]{#2}{#3}{#4}}
\newcommand\scanldII[4][] {\applicative[#1, ni=2, no=1, nf=2, type=scanld2]{#2}{#3}{#4}}
\newcommand\scanldIII[4][]{\applicative[#1, ni=3, no=1, nf=2, type=scanld3]{#2}{#3}{#4}}
\newcommand\moore[4][]    {\applicative[#1, ni=1, no=1, nf=3, type=moore]{#2}{#3}{#4}}
\newcommand\mooreII[4][]  {\applicative[#1, ni=2, no=1, nf=3, type=moore2]{#2}{#3}{#4}}
\newcommand\mooreIII[4][] {\applicative[#1, ni=3, no=1, nf=3, type=moore3]{#2}{#3}{#4}}
\newcommand\mealy[4][]    {\applicative[#1, ni=1, no=1, nf=3, type=mealy]{#2}{#3}{#4}}
\newcommand\mealyII[4][]  {\applicative[#1, ni=2, no=1, nf=3, type=mealy2]{#2}{#3}{#4}}
\newcommand\mealyIII[4][] {\applicative[#1, ni=3, no=1, nf=3, type=mealy3]{#2}{#3}{#4}}
\newcommand\source[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=source]{#2}{#3}{#4}}
\newcommand\filter[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=filter]{#2}{#3}{#4}}
\newcommand\hold[4][]     {\applicative[#1, ni=1, no=1, nf=1, type=hold]{#2}{#3}{#4}}
\newcommand\fillS[4][]    {\applicative[#1, ni=1, no=1, nf=2, type=fillS]{#2}{#3}{#4}}

\newcommand\zip[3][]      {\primitivespecial[#1,ni=2,no=1,type=zipshape,reverse shape=false]{#2}{#3}}
\newcommand\zipIII[3][]   {\primitivespecial[#1,ni=3,no=1,type=zipshape,reverse shape=false]{#2}{#3}}
\newcommand\zipIV[3][]    {\primitivespecial[#1,ni=4,no=1,type=zipshape,reverse shape=false]{#2}{#3}}
\newcommand\zipV[3][]     {\primitivespecial[#1,ni=5,no=1,type=zipshape,reverse shape=false]{#2}{#3}}
\newcommand\zipVI[3][]    {\primitivespecial[#1,ni=6,no=1,type=zipshape,reverse shape=false]{#2}{#3}}
\newcommand\unzip[3][]    {\primitivespecial[#1, ni=1, no=2, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipIII[3][] {\primitivespecial[#1, ni=1, no=3, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipIV[3][]  {\primitivespecial[#1, ni=1, no=4, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipV[3][]   {\primitivespecial[#1, ni=1, no=5, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipVI[3][]  {\primitivespecial[#1, ni=1, no=6, type=zipshape, reverse shape]{#2}{#3}}

\newcommand\farm[4][]        {\parcomp[#1, type=datapar,reverse shape=false]{#2}{#3}{#4}}
\newcommand\pipe[4][]        {\parcomp[#1, type=pipe,reverse shape=false]{#2}{#3}{#4}}
\newcommand\reduce[4][]      {\parcomp[#1, type=merge,reverse shape=false]{#2}{#3}{#4}}
\newcommand\generate[4][]    {\parcomp[#1, type=merge,reverse shape=true]{#2}{#3}{#4}}

\newcommand\unzipx[3][]      {\parcomm[#1, ni=1, no=1, outer type=svbase,
                                reverse inner=false, reverse outer=false]{#2}{#3}}
\newcommand\zipx[3][]        {\parcomm[#1, ni=1, no=1, outer type=svbase, 
                                reverse inner=false, reverse outer=true]{#2}{#3}}
\newcommand\splitatv[3][]    {\parcomm[#1, ni=1, no=2, outer type=v2vbase,
                                reverse inner=false, reverse outer=false]{#2}{#3}}
\newcommand\catv[3][]        {\parcomm[#1, ni=2, no=1, outer type=v2vbase,
                                reverse inner=false, reverse outer=true]{#2}{#3}}


%\newcommand\unzipv[3][]{
%	\parcomm[#1, ni=1, no=2, inner type=stdcomm48box, outer type=v2vbase, 
%        reverse inner=false, reverse outer=false]{#2}{#3};
%	\foreach \i in {0,1,...,3} {
%		\pgfmathtruncatemacro{\dbl}{\i+4}
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\dbl);
%	}
%}
%\newcommand\zipv[3][]{
%	\parcomm[#1, ni=2, no=1, inner type=stdcomm48box, outer type=v2vbase, 
%	    reverse inner=true, reverse outer=true]{#2}{#3};
%	\foreach \i in {0,1,...,3} {
%		\pgfmathtruncatemacro{\dbl}{\i+4}
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\dbl);
%	}
%}
%
%
%\newcommand\oddsv[3][]{ 
%	\parcomm[#1, ni=1, no=1, inner type=stdcomm88box, outer type=vvbase,
%	    reverse inner=false, reverse outer=false]{#2}{#3};
%	\foreach \i in {0,2,...,6} {
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
%	}
%}
%\newcommand\evensv[3][]{%
%	\parcomm[#1, ni=1, no=1, inner type=stdcomm88box, outer type=vvbase,
%	    reverse inner=false, reverse outer=false]{#2}{#3};
%	\foreach \i in {1,3,...,7} {
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
%	}
%}
%\newcommand\reversev[3][]{%
%	\parcomm[#1, ni=1, no=1, inner type=stdcomm88box, outer type=vvbase,
%	    reverse inner=false, reverse outer=false]{#2}{#3};
%	\foreach \i in {0,1,...,7} {
%		\pgfmathtruncatemacro\result{7-\i}
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\result);
%	}
%}
%\newcommand\groupv[3][]{%
%	\parcomm[#1, ni=1, no=1, inner type=stdcomm88box, outer type=vgvbase,
%	    reverse inner=false, reverse outer=false]{#2}{#3};
%	\foreach \i in {0,1,...,7} {
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
%	}
%}
%\newcommand\concatv[3][]{%
%	\parcomm[#1, ni=1, no=1, inner type=stdcomm88box, outer type=vgvbase,
%	    reverse inner=false, reverse outer=true]{#2}{#3};
%	\foreach \i in {0,1,...,7} {
%		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
%	}
%}
%
%\newcommand\dropabstv[3][]   {\parcommbox[#1, ni=1, no=1, outer type=vvbase, inner type=invbox,
%                                reverse inner=false, reverse outer=true]{#2}{#3}{$\perp$}}

\newcommand\unzipv[3][]{
	\parcommbox[#1, ni=1, no=2,  outer type=v2vbase, inner type=funcbox, reverse outer=false]{#2}{#3}{$ unzipv $};
}
\newcommand\zipv[3][]{
	\parcommfunc[#1, ni=2, no=1, outer type=v2vbase, reverse outer=true]{#2}{#3}{$ zipv $};
}


\newcommand\oddsv[3][]{ 
	\parcommfunc[#1, ni=1, no=1, outer type=vvbase,reverse outer=false]{#2}{#3}{$ odds $};
}
\newcommand\evensv[3][]{%
	\parcommfunc[#1, ni=1, no=1, outer type=vvbase, reverse outer=false]{#2}{#3}{$ evens $};
}
\newcommand\reversev[3][]{%
	\parcommfunc[#1, ni=1, no=1, outer type=vvbase, reverse outer=false]{#2}{#3}{$ reverse $};
}
\newcommand\groupv[3][]{%
	\parcommfunc[#1, ni=1, no=1, nf=1, outer type=vgvbase, reverse outer=false]{#2}{#3}{$ group $};
}
\newcommand\concatv[3][]{%
	\parcommfunc[#1, ni=1, no=1, outer type=vgvbase, reverse outer=true]{#2}{#3}{$ concat $};
}
\newcommand\filteridxv[3][]{%
	\parcommfunc[#1, ni=1, no=1, nf=1, outer type=vvbase, reverse outer=false]{#2}{#3}{$ filteridx $};
}
\newcommand\gatherv[3][]{%
	\parcommfunc[#1, ni=1, no=1, nf=2, outer type=vvbase, reverse outer=false]{#2}{#3}{$ gather $};
}
\newcommand\gatherAdpv[3][]{%
	\parcommfunc[#1, ni=2, no=1, nf=2, outer type=v2vbase, reverse outer=true]{#2}{#3}{$ gatherAdp $};
}
\newcommand\selectv[3][]{%
	\parcommfunc[#1, ni=2, no=1, outer type=v2vbase, reverse outer=true]{#2}{#3}{$ select $};
}
\newcommand\distributev[3][]{%
	\parcommfunc[#1, ni=2, no=1, nf=1, outer type=v2vbase, reverse outer=true]{#2}{#3}{$ distribute $};
}
\newcommand\filterv[3][]{%
	\parcommfunc[#1, ni=1, no=1, nf=1, outer type=vvbase, reverse outer=false]{#2}{#3}{$ filter $};
}
\newcommand\getv[3][]{%
	\parcommfunc[#1, ni=1, no=1, nf=1, outer type=vvbase, reverse outer=false]{#2}{#3}{$ get $};
}