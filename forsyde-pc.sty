\NeedsTeXFormat{LaTeX2e}
\RequirePackage{forsyde-tikz}
\ProvidesPackage{forsyde-pc}
                 [204/12/01 v0.1 Some user-defined macros for ForSyDe process neIIrk constructors]

\newcommand\delay[4][]    {\applicative[#1, ni=1, no=1, nf=1, type=delay]{#2}{#3}{#4}}
\newcommand\delayn[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=delayn]{#2}{#3}{#4}}
\newcommand\map[4][]      {\applicative[#1, ni=1, no=1, nf=1, type=map]{#2}{#3}{#4}}
\newcommand\comb[4][]     {\applicative[#1, ni=1, no=1, nf=1, type=comb]{#2}{#3}{#4}}
\newcommand\combII[4][]   {\applicative[#1, ni=2, no=1, nf=1, type=comb2]{#2}{#3}{#4}}
\newcommand\combIII[4][]  {\applicative[#1, ni=3, no=1, nf=1, type=comb3]{#2}{#3}{#4}}
\newcommand\combIV[4][]   {\applicative[#1, ni=4, no=1, nf=1, type=comb4]{#2}{#3}{#4}}
\newcommand\scanl[4][]    {\applicative[#1, ni=1, no=1, nf=2, type=scanl]{#2}{#3}{#4}}
\newcommand\scanlII[4][]  {\applicative[#1, ni=2, no=1, nf=2, type=scanl2]{#2}{#3}{#4}}
\newcommand\scanlIII[4][] {\applicative[#1, ni=3, no=1, nf=2, type=scanl3]{#2}{#3}{#4}}
\newcommand\scanld[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=scanld]{#2}{#3}{#4}}
\newcommand\scanldII[4][] {\applicative[#1, ni=2, no=1, nf=2, type=scanld2]{#2}{#3}{#4}}
\newcommand\scanldIII[4][]{\applicative[#1, ni=3, no=1, nf=2, type=scanld3]{#2}{#3}{#4}}
\newcommand\moore[4][]    {\applicative[#1, ni=1, no=1, nf=3, type=moore]{#2}{#3}{#4}}
\newcommand\mooreII[4][]  {\applicative[#1, ni=2, no=1, nf=3, type=moore2]{#2}{#3}{#4}}
\newcommand\mooreIII[4][] {\applicative[#1, ni=3, no=1, nf=3, type=moore3]{#2}{#3}{#4}}
\newcommand\mealy[4][]    {\applicative[#1, ni=1, no=1, nf=3, type=mealy]{#2}{#3}{#4}}
\newcommand\mealyII[4][]  {\applicative[#1, ni=2, no=1, nf=3, type=mealy2]{#2}{#3}{#4}}
\newcommand\mealyIII[4][] {\applicative[#1, ni=3, no=1, nf=3, type=mealy3]{#2}{#3}{#4}}
\newcommand\source[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=source]{#2}{#3}{#4}}
\newcommand\filter[4][]   {\applicative[#1, ni=1, no=1, nf=2, type=filter]{#2}{#3}{#4}}
\newcommand\hold[4][]     {\applicative[#1, ni=1, no=1, nf=1, type=hold]{#2}{#3}{#4}}
\newcommand\fillS[4][]    {\applicative[#1, ni=1, no=1, nf=2, type=fillS]{#2}{#3}{#4}}

\newcommand\zip[3][]      {\primitivespecial[#1, ni=2, no=1, type=zipshape]{#2}{#3}}
\newcommand\zipIII[3][]   {\primitivespecial[#1, ni=3, no=1, type=zipshape]{#2}{#3}}
\newcommand\zipIV[3][]    {\primitivespecial[#1, ni=4, no=1, type=zipshape]{#2}{#3}}
\newcommand\zipV[3][]     {\primitivespecial[#1, ni=5, no=1, type=zipshape]{#2}{#3}}
\newcommand\zipVI[3][]    {\primitivespecial[#1, ni=6, no=1, type=zipshape]{#2}{#3}}
\newcommand\unzip[3][]    {\primitivespecial[#1, ni=1, no=2, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipIII[3][] {\primitivespecial[#1, ni=1, no=3, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipIV[3][]  {\primitivespecial[#1, ni=1, no=4, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipV[3][]   {\primitivespecial[#1, ni=1, no=5, type=zipshape, reverse shape]{#2}{#3}}
\newcommand\unzipVI[3][]  {\primitivespecial[#1, ni=1, no=6, type=zipshape, reverse shape]{#2}{#3}}

\newcommand\dataparallel[4][]{\parcomp[#1, nf=0, type=datapar]{#2}{#3}{#4}}
\newcommand\farm[4][]        {\parcomp[#1, nf=1, type=datapar]{#2}{#3}{#4}}
\newcommand\pipe[4][]        {\parcomp[#1, nf=0, type=pipe]{#2}{#3}{#4}}
\newcommand\pipef[4][]        {\parcomp[#1, nf=1, type=pipe]{#2}{#3}{#4}}
\newcommand\reduce[4][]      {\parcomp[#1, nf=0, type=merge]{#2}{#3}{#4}}

\newcommand\unzipx[3][]      {\parcomm[#1, ni=1, no=1, outer type=s2vbase]{#2}{#3}}
\newcommand\zipx[3][]        {\parcomm[#1, ni=1, no=1, outer type=s2vbase, reverse shape]{#2}{#3}}
\newcommand\oddsV[3][]{ 
	\parcomm[#1, ni=1, no=1, inner type=standardskeletonbox, outer type=v2vbase]{#2}{#3};
	\foreach \i in {0,2,...,6} {
		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
	}
}
\newcommand\evensV[3][]{%
	\parcomm[#1, ni=1, no=1, inner type=standardskeletonbox, outer type=v2vbase]{#2}{#3};
	\foreach \i in {1,3,...,7} {
		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
	}
}
\newcommand\reverseV[3][]{%
	\parcomm[#1, ni=1, no=1, inner type=standardskeletonbox, outer type=v2vbase]{#2}{#3};
	\foreach \i in {0,1,...,7} {
		\pgfmathtruncatemacro\result{7-\i}
		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\result);
	}
}
\newcommand\groupV[3][]{%
	\parcomm[#1, ni=1, no=1, inner type=standardskeletonbox, outer type=v2gvbase]{#2}{#3};
	\foreach \i in {0,1,...,7} {
		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
	}
}
\newcommand\concatV[3][]{%
	\parcomm[#1, ni=1, no=1, inner type=standardskeletonbox, outer type=v2gvbase]{#2}{#3};
	\foreach \i in {0,1,...,7} {
		\draw[line width=.3pt] (v#2.vi\i) -- (v#2.vo\i);
	}
}
